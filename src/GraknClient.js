const grpc = require("grpc");
const messages = require("./autogenerated/grakn_pb");
const conceptMessages = require("./autogenerated/concept_pb");
const services = require("./autogenerated/grakn_grpc_pb");
const ConceptFactory = require("./ConceptFactory");
const AsyncBlockingQueue = require("./util/AsyncBlockingQueue");

function GraknClient(uri, keyspace, credentials) {
  this.client = new services.GraknClient(
    uri,
    grpc.credentials.createInsecure()
  );
  this.keyspace = keyspace;
  this.credentials = credentials;
  this.stream = null;
  this.response = new AsyncBlockingQueue();
  this.result = [];
}

function executeQuery(query, stream) {
  const txRequest = new messages.TxRequest();
  const executeQuery = new messages.ExecQuery();
  const queryRequest = new messages.Query();
  queryRequest.setValue(query);
  executeQuery.setQuery(queryRequest);
  txRequest.setExecquery(executeQuery);
  stream.write(txRequest);
}

GraknClient.prototype._openTx = async function() {
  const openRequest = new messages.Open();
  const txRequest = new messages.TxRequest();
  const messageKeyspace = new messages.Keyspace();
  messageKeyspace.setValue(this.keyspace);

  openRequest.setKeyspace(messageKeyspace);
  openRequest.setTxtype(messages.TxType.WRITE);
  openRequest.setUsername(this.credentials.username);
  openRequest.setPassword(this.credentials.password);
  txRequest.setOpen(openRequest);

  this.stream.write(txRequest);

  await this.response.pop();
};

GraknClient.prototype._setResponse = function(resp) {
  this.response.add(resp);
};

/**
 * Blocking code that waits for a response from server
 */
GraknClient.prototype._getResponse = function() {
  return this.response.pop();
};

GraknClient.prototype._executeQueryCb = async function executeQueryCb() {
  const resp = await this.response.pop();
  if (resp.hasDone()) {
    const currentResult = this.result;
    this.result = [];
    return currentResult;
  } else if (resp.hasIteratorid()) {
    const nr = new messages.Next();
    nr.setIteratorid(resp.getIteratorid());
    const tr = new messages.TxRequest();
    tr.setNext(nr);
    this.nextRequest = tr;
    this._getNextResult();
    return await this._executeQueryCb();
  } else if (resp.hasQueryresult()) {
    this._parseResult(resp.getQueryresult());
    this._getNextResult();
    return await this._executeQueryCb();
  }
};

GraknClient.prototype._getNextResult = function(cb) {
  this.stream.write(this.nextRequest);
};

GraknClient.prototype._parseResult = function(queryResult) {
  if (queryResult.hasOtherresult()) {
    // compute or aggregate query
    this.result = JSON.parse(queryResult.getOtherresult());
  } else {
    const answerMap = new Map();
    queryResult
      .getAnswer()
      .getAnswerMap()
      .forEach((grpcConcenpt, key) => {
        answerMap.set(
          key,
          ConceptFactory.createConcept(grpcConcenpt, this.stream, this.response)
        );
      });
    this.result.push(answerMap);
  }
};

GraknClient.prototype._initStream = async function() {
  this.stream = this.client.tx();
  this.stream.on("data", resp => {
    this.response.add(resp);
  });

  this.stream.on("end", () => {
    console.log("Stream from server terminated.");
  });

  this.stream.on("error", err => {
    console.log("BAD ERROR: " + err);
  });

  // call.on('end', () => {
  //     // probably delete some iterators?
  // })

  // call.on('status', () => {
  //     // do we need this callback?
  // })
  await this._openTx(this.stream, this.keyspace, this.credentials);
};

GraknClient.prototype.execute = async function execute(query) {
  if (!this.stream) {
    await this._initStream();
  }
  executeQuery(query, this.stream);
  return await this._executeQueryCb();
};

module.exports = GraknClient;
