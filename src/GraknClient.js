const grpc = require("grpc");
const messages = require("./autogenerated/grakn_pb");
const services = require("./autogenerated/grakn_grpc_pb");

function GraknClient(uri, keyspace, credentials) {
  this.client = new services.GraknClient(
    uri,
    grpc.credentials.createInsecure()
  );
  this.keyspace = keyspace;
  this.credentials = credentials;
  this.stream = null;
}

let resolveOpen;

function executeQuery(query, stream, resolve, reject) {
  const txRequest = new messages.TxRequest();
  const executeQuery = new messages.ExecQuery();
  const queryRequest = new messages.Query();
  queryRequest.setValue(query);
  executeQuery.setQuery(queryRequest);
  txRequest.setExecquery(executeQuery);
  stream.write(txRequest);
  console.log("EHI RICEVUTO " + query);
}

function openTx(duplex, keyspace, credentials) {
  return new Promise((resolve, reject) => {
    const openRequest = new messages.Open();
    const txRequest = new messages.TxRequest();
    const messageKeyspace = new messages.Keyspace();
    messageKeyspace.setValue(keyspace);

    openRequest.setKeyspace(messageKeyspace);
    openRequest.setTxtype(messages.TxType.WRITE);
    openRequest.setUsername(credentials.username);
    openRequest.setPassword(credentials.password);
    txRequest.setOpen(openRequest);

    console.log("About to write open request");
    duplex.write(txRequest);
    console.log("Done sending Open request");
    resolveOpen = () => {
      console.log("RESOLVINNNGGG");
      resolve();
    };
    //Register fn for Open response
    duplex.on("data", resolveOpen);
  });
}

function switchOnResponse(resp) {
  console.log("Hey, response: " + resp);
}

GraknClient.prototype.execute = function execute(query) {
  return new Promise((resolve, reject) => {
    if (!this.stream) {
      this.stream = this.client.tx();
      openTx(this.stream, this.keyspace, this.credentials).then(() => {
        this.stream.removeListener("data", resolveOpen);
        this.stream.on("data", resp => {
          switchOnResponse(resp);
        });
        executeQuery(query, this.stream, resolve, reject);
      });
    } else {
      executeQuery(query, this.stream, resolve, reject);
    }
  });

  duplex.on("end", () => {
    console.log("Stream from server terminated.");
  });

  duplex.on("error", err => {
    console.log("BAD ERROR: " + err);
  });

  // call.on('end', () => {
  //     // probably delete some iterators?
  // })

  // call.on('status', () => {
  //     // do we need this callback?
  // })
};

module.exports = GraknClient;
