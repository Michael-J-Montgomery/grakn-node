const grpc = require("grpc");
const messages = require("./autogenerated/grakn_pb");
const services = require("./autogenerated/grakn_grpc_pb");

const DEFAULT_URI = 'localhost:48555';
const DEFAULT_KEYSPACE = 'grakn';

function GraknClient(uri = DEFAULT_URI , keyspace = DEFAULT_KEYSPACE){
    this.client = new services.GraknClient(uri, grpc.credentials.createInsecure());
    this.keyspace = keyspace
}

function syncWaitOnResponse(duplex){
    return new Promise((resolve) => duplex.on('data', (response) => { 
        // check type of response and then act!!!
        console.log("Received response!!!!!!");
        console.log(response);
        resolve();
    }))
}

GraknClient.prototype.open = function open(){
    const openRequest = new messages.Open();
    const txRequest = new messages.TxRequest();
    const messageKeyspace = new messages.Keyspace();
    messageKeyspace.setValue(this.keyspace);

    openRequest.setKeyspace(messageKeyspace);
    openRequest.setTxtype(messages.TxType.WRITE);
    openRequest.setUsername('cassandra');
    openRequest.setPassword('cassandra');
    txRequest.setOpen(openRequest);

    const duplex = this.client.tx();
    console.log('About to write open request');
    duplex.write(txRequest);
    console.log('Done sending Open request');
    
    (async () => {await syncWaitOnResponse(duplex);})();

    console.log('PORCO DIO');

    duplex.on('end', ()=>{
        console.log('Stream from server terminated.');
    })

    duplex.on('error', (err)=>{ console.log("BAD ERROR: "+err);})

    // call.on('end', () => {
    //     // probably delete some iterators?
    // })

    // call.on('status', () => {
    //     // do we need this callback?
    // })
}

function Tx(duplex){
    this.duplex = duplex;
}

module.exports = GraknClient;
