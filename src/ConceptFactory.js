const messages = require("./autogenerated/grakn_pb");
const conceptMessages = require("./autogenerated/concept_pb");

function createConcept(grpcConcept, stream) {
  switch (grpcConcept.getBasetype()) {
    case 0:
      return new Entity();
      break;
    case 1:
      return new Relationship();
      break;
    case 2:
      return new Attribute();
      break;
    case 3:
      return new EntityType();
      break;
    case 4:
      return new RelationshipType(grpcConcept.getId(), stream);
      break;
    case 5:
      return new AttributeType();
      break;
    case 6:
      return new Role();
      break;
    case 7:
      return new Rule();
      break;
    case 8:
      return new MetaType();
      break;
    default:
      throw "BaseType not recognised.";
  }
}

const ConceptMethods = {
  delete: function() {
    const TxRequest = new messages.TxRequest();
    const runConceptMethodRequest = new messages.RunConceptMethod();
    const conceptMethod = new conceptMessages.ConceptMethod();
    const unitDelete = new conceptMessages.Unit();
    conceptMethod.setDelete(unitDelete);
    runConceptMethodRequest.setId(this.conceptId);
    runConceptMethodRequest.setConceptmethod(conceptMethod);
  }
};

function _buildState(conceptId, duplex) {
  return {
    id: { value: conceptId },
    stream: { value: duplex }
  };
}

function AttributeType() {}

function RelationshipType(conceptId, stream) {
  return Object.create(ConceptMethods, _buildState(conceptId, stream));
}

function EntityType() {}

function Relationship() {}

function Attribute() {}

function Entity() {}

function Role() {}

function Rule() {}

function MetaType() {}

module.exports = { createConcept };
